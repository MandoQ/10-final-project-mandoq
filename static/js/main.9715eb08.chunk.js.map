{"version":3,"sources":["Search.js","Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["Search","Nav","className","activeKey","Item","id","type","value","this","props","textInput","placeholder","aria-label","onChange","handleChange","handleLanguageChange","defualtvalue","handleUnitChange","variant","onClick","fetchWeather","Component","Forecast","timeStamp","a","Date","getDate","getDay","Table","striped","bordered","hover","dailyForecast","map","daily","index","dt","Math","round","temp","day","degree","weather","description","apiKey","today","month","String","getMonth","App","requestCurrentWeatherAndForecast","degreeNotation","state","units","city","encodeURIComponent","lan","language","url","fetch","then","response","ok","json","Promise","reject","result","setState","currentWeather","coordinates","coord","lat","lon","res","bind","event","target","preventDefault","console","log","Card","Body","Title","name","Text","main","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9715eb08.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Search.css';\nimport Nav from 'react-bootstrap/Nav'\nclass Search extends Component {\n\n    render() {\n        return (\n\n            <Nav className=\"justify-content-center\" activeKey=\"/home\">\n                <Nav.Item>\n                    <input id=\"searchField\" className=\"form-control mr-sm-2\" type=\"text\" value={this.props.textInput} placeholder=\"Enter A City\" aria-label=\"Search\" onChange={this.props.handleChange} />\n                </Nav.Item>\n                <Nav.Item>\n                    <select id=\"lan-Select\" onChange={this.props.handleLanguageChange} >\n                        <option defualtvalue=\"en\" value=\"en\">English</option>\n                        <option value=\"es\">Spanish</option>\n                        <option value=\"af\">Afrikaans</option>\n                        <option value=\"al\">Albanian</option>\n                        <option value=\"ar\">Arabic</option>\n                        <option value=\"az\">Azerbaijani</option>\n                        <option value=\"bg\">Bulgarian</option>\n                        <option value=\"ca\">Catalan</option>\n                        <option value=\"cz\">Czech</option>\n                        <option value=\"da\">Danish</option>\n\n                        <option value=\"de\">German</option>\n                        <option value=\"el\">Greek</option>\n                        <option value=\"eu\">Basque</option>\n                        <option value=\"fa\">Persian</option>\n                        <option value=\"fi\">Finnish</option>\n                        <option value=\"fr\">French</option>\n                        <option value=\"he\">Hebrew</option>\n                        <option value=\"hi\">Hindi</option>\n                        <option value=\"it\">Italian</option>\n                        <option value=\"ja\">Japanese</option>\n                        <option value=\"pt\">Portuguese</option>\n                        <option value=\"ua\">Ukrainian</option>\n                        <option value=\"zh_cn\">Chinese Simplified</option>\n                    </select>\n                </Nav.Item>\n                <Nav.Item>\n                    <select id=\"degree-select\" onChange={this.props.handleUnitChange} >\n                        <option defualtvalue=\"standard\" value=\"standard\">Standard</option>\n                        <option value=\"metric\">Metric</option>\n                        <option value=\"imperial\">Imperial</option>\n                    </select>\n                </Nav.Item>\n                <Nav.Item>\n                <button id=\"submit-button\" variant=\"light\" onClick={this.props.fetchWeather} className=\"btn btn-outline btn btn-light\">Get Results</button>\n                </Nav.Item>\n            </Nav>\n        );\n    }\n}\nexport default Search;","import React, { Component } from 'react';\nimport './Forecast.css'\nimport Table from 'react-bootstrap/Table'\nclass Forecast extends Component {\n\n    getDate(timeStamp){\n        var a = new Date(timeStamp * 1000);\n        let days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n        let date = + a.getDate() + \" \" + days[a.getDay()];\n        return date;\n    }\n    render() {\n        //console.log(this.props.dailyForecast);\n        return (\n            <div>\n                <Table className=\"forecast-table\" striped bordered hover variant=\"dark\">\n                    <thead>\n                        <tr>\n                            <th>Date</th>\n                            <th>Day Temperature</th>\n                            <th>Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.dailyForecast.map((daily, index) => {\n                            return (\n                                <tr key={index}>\n                                    <td>{this.getDate(daily.dt)}</td>\n                                    <td>{Math.round(daily.temp.day) + \" \" + this.props.degree}</td>\n                                    <td>{daily.weather[0].description}</td>\n                                </tr>\n                            )\n                        })}\n\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\nexport default Forecast;","import React, { Component } from 'react';\nimport './App.css';\nimport Search from './Search.js'\nimport Card from 'react-bootstrap/Card'\nimport Forecast from './Forecast.js'\nvar apiKey = '7354b756ee4fd35295b43a9c6f22d8e8';\nlet months = [\"Januaray\", \"Febuary\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"Novemeber\", \"December\"]\nvar today = new Date();\nvar month = String(months[today.getMonth()]);\nvar day = String(today.getDate());\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      textInput: '',\n      language: 'en',\n      units: 'standard',\n      degree: 'K',\n      currentWeather: {},\n      daily: [],\n      coordinates: {}\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.fetchWeather = this.fetchWeather.bind(this);\n    this.handleLanguageChange = this.handleLanguageChange.bind(this);\n    this.handleUnitChange = this.handleUnitChange.bind(this);\n  }\n\n  fetchWeather(event) {\n    this.requestCurrentWeatherAndForecast();\n    // var degreeNotation = \"\";\n    // if (this.state.units == \"standard\") {\n    //   degreeNotation = \"K\";\n    // } else if (this.state.units == \"metric\") {\n    //   degreeNotation = \"°C\";\n    // } else {\n    //   degreeNotation = \"°F\";\n    // }\n    // let city = encodeURIComponent(this.state.textInput);\n    // let lan = encodeURIComponent(this.state.language);\n    // let units = encodeURIComponent(this.state.units);\n\n\n    //   let url = 'https://api.openweathermap.org/data/2.5/weather?q=' + city + '&appid=' + apiKey + '&lang=' + lan + '&units=' + units;\n    //   fetch(url)\n    //     .then(res => res.json())\n    //     .then(result => {\n    //       this.setState({\n    //         currentWeather: result,\n    //         degree: degreeNotation,\n    //         coordinates: result.coord\n    //       });\n    //     })\n    //   this.requestCurrentWeatherAndForecast();\n  }\n\n  //fetchForecast(){\n  //console.log(this.state.coordinates);\n  // fetch('https://api.openweathermap.org/data/2.5/onecall?lat=' + this.state.coord.lat + '&lon=' + this.state.coord.lon + '&exclude=current,minutely,hourly,alerts&appid=' + apiKey)\n  //  .then(res => res.json())\n  //  .then(result => this.setState({ daily: result.daily }))\n  //}\n\n  requestCurrentWeatherAndForecast = async () => {\n    var degreeNotation = \"\";\n    if (this.state.units === \"standard\") {\n      degreeNotation = \"K\";\n    } else if (this.state.units === \"metric\") {\n      degreeNotation = \"°C\";\n    } else {\n      degreeNotation = \"°F\";\n    }\n    let city = encodeURIComponent(this.state.textInput);\n    let lan = encodeURIComponent(this.state.language);\n    let units = encodeURIComponent(this.state.units);\n\n    let url = 'https://api.openweathermap.org/data/2.5/weather?q=' + city + '&appid=' + apiKey + '&lang=' + lan + '&units=' + units;\n    const weatherResult = await fetch(url)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          return Promise.reject('No Cities Found');\n        }\n      })\n      // .then(res => res.json())\n\n      .then(result => this.setState({\n        currentWeather: result,\n        degree: degreeNotation,\n        coordinates: result.coord\n      }))\n\n\n    const forecast = await fetch('https://api.openweathermap.org/data/2.5/onecall?lat=' + this.state.coordinates.lat + '&lon=' + this.state.coordinates.lon +'&exclude=current,minutely,hourly,alerts&appid=' + apiKey + '&units=' + units +'&lang=' + lan)\n      .then(res => res.json())\n      .then(result => this.setState({ daily: result.daily }))\n  }\n\n  handleChange(event) {\n    this.setState({\n      textInput: event.target.value\n    });\n  }\n\n  handleLanguageChange(event) {\n    event.preventDefault();\n    this.setState({\n      language: event.target.value\n    });\n  }\n\n  handleUnitChange(event) {\n    this.setState({\n      units: event.target.value,\n    });\n  }\n\n  render() {\n    console.log(this.state.daily);\n    return (\n      <section>\n        <Search fetchWeather={this.fetchWeather} handleChange={this.handleChange} handleLanguageChange={this.handleLanguageChange} handleUnitChange={this.handleUnitChange} />\n        <Card id=\"cityCard\">\n          <Card.Body>\n            <Card.Title>{this.state.currentWeather.name}</Card.Title>\n            <Card.Text>{month + \" \" + day}</Card.Text>\n            <Card.Text>\n              {this.state.currentWeather.main && Math.round(this.state.currentWeather.main.temp) + \" \" + this.state.degree}\n            </Card.Text>\n            <Card.Text>\n              {this.state.currentWeather.weather && this.state.currentWeather.weather[0].description}\n            </Card.Text>\n          </Card.Body>\n        </Card>\n        <Forecast degree={this.state.degree} dailyForecast={this.state.daily}/>\n      </section>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}